"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DATA_UPLOAD_MAX_MEMORY_SIZE = 524288000  # ~500MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 524288000  # ~500MB

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ek@*jkrlls304#1q+*r0w13z3n%y_f9gyguwns)($3=kohm20t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'clipper',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'core',
    'user',
    'payments',
    'social_media',
    'ai_influencer',
    'content_generation',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Move to top for CORS
    'core.middleware.WebhookThrottleMiddleware',  # Webhook throttling
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.RateLimitHeaderMiddleware',  # Rate limit headers (after auth)
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (User-uploaded content like video clips)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'core.User'

# ==============================================================================
# CELERY CONFIGURATION
# ==============================================================================
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes

# Celery Beat Schedule (for social media automation)
from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    # Queue processing tasks
    'process-video-queue': {
        'task': 'core.tasks.process_next_in_queue',
        'schedule': 30.0,  # Every 30 seconds
    },
    'process-notifications': {
        'task': 'core.tasks.process_notification_queue',
        'schedule': 60.0,  # Every minute
    },
    'update-queue-stats': {
        'task': 'core.tasks.update_queue_stats',
        'schedule': 300.0,  # Every 5 minutes
    },
    'cleanup-old-entries': {
        'task': 'core.tasks.cleanup_old_queue_entries',
        'schedule': crontab(hour=2, minute=30),  # Daily at 2:30 AM
    },
    # Social media tasks
    'process-scheduled-posts': {
        'task': 'social_media.tasks.process_scheduled_posts',
        'schedule': crontab(minute='*/5'),  # Every 5 minutes
    },
    'update-analytics-batch': {
        'task': 'social_media.tasks.update_analytics_batch',
        'schedule': crontab(hour=2, minute=0),  # Daily at 2 AM
    },
    'refresh-expiring-tokens': {
        'task': 'social_media.tasks.refresh_expiring_tokens',
        'schedule': crontab(hour=1, minute=0),  # Daily at 1 AM
    },
}

# ==============================================================================
# REST FRAMEWORK CONFIGURATION
# ==============================================================================
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '30/hour',           # Anonymous users: 30 requests per hour
        'user': '100/hour',          # Authenticated users: 100 requests per hour
        'free': '50/hour',           # Free plan users: 50 requests per hour
        'pro': '200/hour',           # Pro plan users: 200 requests per hour
        'premium': '500/hour',       # Premium plan users: 500 requests per hour
        'video_processing': '10/hour',  # Video processing: 10 per hour (expensive operation)
        'video_processing_free': '2/hour',    # Free users: 2 video processes per hour
        'video_processing_pro': '20/hour',    # Pro users: 20 video processes per hour
        'video_processing_premium': '50/hour', # Premium users: 50 video processes per hour
        'burst': '10/min',           # Burst protection: 10 requests per minute
        'payment': '20/hour',        # Payment operations: 20 per hour
        'webhook': '1000/hour',      # Webhooks: 1000 per hour (Stripe can send many)
    }
}

# ==============================================================================
# CORS CONFIGURATION
# ==============================================================================
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:8080",  # Vue dev server
    "http://127.0.0.1:8080",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# ==============================================================================
# OPENAI CONFIGURATION
# ==============================================================================
# Make sure to set this in your environment variables
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# ==============================================================================
# STRIPE CONFIGURATION
# ==============================================================================
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET')

# Stripe pricing configuration
STRIPE_PRICE_IDS = {
    'free': None,  # Free plan has no Stripe price ID
    'pro': os.environ.get('STRIPE_PRO_PRICE_ID'),  # Monthly pro subscription
    'premium': os.environ.get('STRIPE_PREMIUM_PRICE_ID'),  # Monthly premium subscription
}

# One-time credit purchase price IDs (optional for additional credit purchases)
STRIPE_CREDIT_PRICE_IDS = {
    '50_credits': os.environ.get('STRIPE_50_CREDITS_PRICE_ID'),
    '100_credits': os.environ.get('STRIPE_100_CREDITS_PRICE_ID'),
    '250_credits': os.environ.get('STRIPE_250_CREDITS_PRICE_ID'),
}

# Frontend URL for Stripe redirects
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'clipper': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# ==============================================================================
# SECURITY SETTINGS
# ==============================================================================
# For development - adjust for production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# ==============================================================================
# FILE HANDLING
# ==============================================================================
# Maximum size for video uploads (adjust as needed)
VIDEO_UPLOAD_MAX_SIZE = 1024 * 1024 * 500  # 500MB
CLIP_MAX_DURATION = 60  # seconds
DEFAULT_CLIP_DURATION = 30  # seconds

# Video processing settings
VIDEO_QUALITY_CRF = 23  # Lower = better quality (18-28 recommended)
AUDIO_BITRATE = '128k'
AUDIO_SAMPLE_RATE = 44100

# FFmpeg settings
FFMPEG_BINARY = os.environ.get('FFMPEG_BINARY', 'ffmpeg')
FFPROBE_BINARY = os.environ.get('FFPROBE_BINARY', 'ffprobe')

# ==============================================================================
# CACHING (Optional but recommended for production)
# ==============================================================================
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/1'),
    }
}

# ==============================================================================
# EMAIL CONFIGURATION (for notifications)
# ==============================================================================
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@yourapp.com')

# Admin emails for system notifications
ADMINS = [
    ('Admin', os.environ.get('ADMIN_EMAIL', 'admin@yourapp.com')),
]